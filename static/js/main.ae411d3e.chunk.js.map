{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","SortingAlgorithms/SortingAlgorithms.js","App.js","index.js"],"names":["ARRAY_LENGTH","ANIMATION_SPEED_MS","MAIN_COLOR","SECONDARY_COLOR","FINAL_COLOR","Button","styled","button","array_of_algorithms","SortingVisualizer","props","state","array","this","resetArray","a","i","push","randomInt","setState","Promise","resolve","animations","getSelectionSortAnimations","colorIndex","arrayBars","document","getElementsByClassName","length","firstIndex","secondIndex","firstIndexStyle","style","secondIndexStyle","color","setTimeout","backgroundColor","newFirstHeight","newSecondHeight","height","getMergeSortAnimations","newHeight","getQuickSortAnimations","getHeapSortAnimations","getBubbleSortAnimations","idx","eval","len","previous","curIndexStyle","className","onClick","sortArray","map","value","React","Component","min","max","Math","floor","random","j","swap","helperArray","slice","mergeSortHelper","mainArray","startIndex","endIndex","secondaryArray","middleIndex","mainArr","start","middle","end","comparedArr","iterator","merge","quickSortHelper","part","pivot","partition","n","heapify","heapSortHelper","largest","left","right","temp","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ae411d3e.chunk.js","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/SortingAlgorithms.js'; \nimport {getQuickSortAnimations} from '../SortingAlgorithms/SortingAlgorithms.js';\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/SortingAlgorithms.js';\nimport {getHeapSortAnimations} from '../SortingAlgorithms/SortingAlgorithms.js';\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/SortingAlgorithms.js';\nimport styled from 'styled-components';\n\nconst ARRAY_LENGTH = 150;\nconst ANIMATION_SPEED_MS = 2;\nconst MAIN_COLOR = '#B0E1FF';\nconst SECONDARY_COLOR = '#1f1e33';\nconst FINAL_COLOR = '#81C953';\n\nconst Button = styled.button`\n    background-color: black;\n    color: white;\n    font-size: 13px;\n    padding: 10px 35px;\n    border-radius: 5px;\n    margin: 10px 0px;\n    cursor: pointer;\n`;\n\nlet array_of_algorithms = [\n    'this.selectionSort()',\n    'this.mergeSort()',\n    'this.quickSort()',\n    'this.heapSort()',\n    'this.bubbleSort()',\n]\n\nexport default class SortingVisualizer extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        var a = [];\n        for (let i = 0; i < ARRAY_LENGTH; i++)\n            a.push(randomInt(25,450));\n        this.setState({\n            array: a,\n            });\n    }\n\n    selectionSort() {\n        return new Promise((resolve) => {\n            const animations = getSelectionSortAnimations(this.state.array);\n            let colorIndex = 0;\n            for (let i = 0; i < animations.length; i++) {\n                const arrayBars = document.getElementsByClassName('array-bar');\n                const changeColor = animations[i].length === 2;\n                if (changeColor) {\n                    const [firstIndex, secondIndex] = animations[i];\n                    const firstIndexStyle = arrayBars[firstIndex].style;\n                    const secondIndexStyle = arrayBars[secondIndex].style;\n                    const color = colorIndex%2 === 0 ? SECONDARY_COLOR : MAIN_COLOR;\n                    colorIndex++;\n                    setTimeout(() => {\n                        firstIndexStyle.backgroundColor = color;\n                        secondIndexStyle.backgroundColor = color;\n                    }, ANIMATION_SPEED_MS*i);\n                }\n                else {\n                    setTimeout(() => {\n                        const [firstIndex, newFirstHeight, secondIndex, newSecondHeight] = animations[i];\n                        const firstIndexStyle = arrayBars[firstIndex].style;\n                        const secondIndexStyle = arrayBars[secondIndex].style;\n                        firstIndexStyle.height = `${newFirstHeight}px`;\n                        secondIndexStyle.height = `${newSecondHeight}px`;\n                    }, ANIMATION_SPEED_MS*i);\n                }\n            }\n            setTimeout(resolve, ANIMATION_SPEED_MS*animations.length);\n        });\n    }\n\n    mergeSort() {\n        return new Promise((resolve) => {\n            const animations = getMergeSortAnimations(this.state.array);\n            for (let i = 0; i < animations.length; i++) {\n                const arrayBars = document.getElementsByClassName('array-bar');\n                const changeColor = i%3 !== 2;\n                if (changeColor) {\n                    const [firstIndex, secondIndex] = animations[i];\n                    const firstIndexStyle = arrayBars[firstIndex].style;\n                    const secondIndexStyle = arrayBars[secondIndex].style;\n                    const color = i%3 === 0 ? SECONDARY_COLOR : MAIN_COLOR;\n                    setTimeout(() => {\n                        firstIndexStyle.backgroundColor = color;\n                        secondIndexStyle.backgroundColor = color;\n                    }, ANIMATION_SPEED_MS*i);\n                }\n                else {\n                    setTimeout(() => {\n                        const [firstIndex, newHeight] = animations[i];\n                        const firstIndexStyle = arrayBars[firstIndex].style;\n                        firstIndexStyle.height = `${newHeight}px`;\n                    }, ANIMATION_SPEED_MS*i);\n                }\n            }\n            setTimeout(resolve, ANIMATION_SPEED_MS*animations.length);\n        });\n    }\n\n    quickSort() {\n        return new Promise((resolve) => {\n            const animations = getQuickSortAnimations(this.state.array);\n            for (let i = 0; i < animations.length; i++) {\n                const arrayBars = document.getElementsByClassName('array-bar');\n                const changeColor = i%3 !== 2;\n                if (changeColor) {\n                    const [firstIndex, secondIndex] = animations[i];\n                    const firstIndexStyle = arrayBars[firstIndex].style;\n                    const secondIndexStyle = arrayBars[secondIndex].style;\n                    const color = i%3 === 0 ? SECONDARY_COLOR : MAIN_COLOR;\n                    setTimeout(() => {\n                        firstIndexStyle.backgroundColor = color;\n                        secondIndexStyle.backgroundColor = color;\n                    }, ANIMATION_SPEED_MS*i);\n                }\n                else {\n                    setTimeout(() => {\n                        const [firstIndex, newFirstHeight, secondIndex, newSecondHeight] = animations[i];\n                        const firstIndexStyle = arrayBars[firstIndex].style;\n                        const secondIndexStyle = arrayBars[secondIndex].style;\n                        firstIndexStyle.height = `${newFirstHeight}px`;\n                        secondIndexStyle.height = `${newSecondHeight}px`;\n                    }, ANIMATION_SPEED_MS*i);\n                }\n            }\n            setTimeout(resolve, ANIMATION_SPEED_MS*animations.length);\n        });\n    }\n\n    heapSort() {\n        return new Promise((resolve) => {\n            const animations = getHeapSortAnimations(this.state.array);\n            for (let i = 0; i < animations.length; i++) {\n                const arrayBars = document.getElementsByClassName('array-bar');\n                const changeColor = i%3 !== 2;\n                if (changeColor) {\n                    const [firstIndex, secondIndex] = animations[i];\n                    const firstIndexStyle = arrayBars[firstIndex].style;\n                    const secondIndexStyle = arrayBars[secondIndex].style;\n                    const color = i%3 === 0 ? SECONDARY_COLOR : MAIN_COLOR;\n                    setTimeout(() => {\n                        firstIndexStyle.backgroundColor = color;\n                        secondIndexStyle.backgroundColor = color;\n                    }, ANIMATION_SPEED_MS*i);\n                }\n                else {\n                    setTimeout(() => {\n                        const [firstIndex, newFirstHeight, secondIndex, newSecondHeight] = animations[i];\n                        const firstIndexStyle = arrayBars[firstIndex].style;\n                        const secondIndexStyle = arrayBars[secondIndex].style;\n                        firstIndexStyle.height = `${newFirstHeight}px`;\n                        secondIndexStyle.height = `${newSecondHeight}px`;\n                    }, ANIMATION_SPEED_MS*i);\n                }\n            }\n            setTimeout(resolve, ANIMATION_SPEED_MS*animations.length);\n        });\n    }\n\n    bubbleSort() {\n        return new Promise((resolve) => {\n            const animations = getBubbleSortAnimations(this.state.array);\n            for (let i = 0; i < animations.length; i++) {\n                const arrayBars = document.getElementsByClassName('array-bar');\n                const changeColor = i%3 !== 2;\n                if (changeColor) {\n                    const [firstIndex, secondIndex] = animations[i];\n                    const firstIndexStyle = arrayBars[firstIndex].style;\n                    const secondIndexStyle = arrayBars[secondIndex].style;\n                    const color = i%3 === 0 ? SECONDARY_COLOR : MAIN_COLOR;\n                    setTimeout(() => {\n                        firstIndexStyle.backgroundColor = color;\n                        secondIndexStyle.backgroundColor = color;\n                    }, ANIMATION_SPEED_MS*i);\n                }\n                else {\n                    setTimeout(() => {\n                        const [firstIndex, newFirstHeight, secondIndex, newSecondHeight] = animations[i];\n                        const firstIndexStyle = arrayBars[firstIndex].style;\n                        const secondIndexStyle = arrayBars[secondIndex].style;\n                        firstIndexStyle.height = `${newFirstHeight}px`;\n                        secondIndexStyle.height = `${newSecondHeight}px`;\n                    }, ANIMATION_SPEED_MS*i);\n                }\n            }\n            setTimeout(resolve, ANIMATION_SPEED_MS*animations.length);\n        });\n        \n    }\n\n    async sortArray(idx) {\n        // eval issues a warning, so disabling that warning with next line\n        // eslint-disable-next-line\n        await eval(array_of_algorithms[idx]);\n        const len = this.state.array.length;\n        let previous = 0;\n        for (let i = 0; i < len; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (previous <= this.state.array[i]) {\n                const curIndexStyle = arrayBars[i].style;\n                setTimeout(() => {\n                    curIndexStyle.backgroundColor = FINAL_COLOR;\n                }, ANIMATION_SPEED_MS*i);\n                previous = this.state.array[i];\n            }\n        }\n        setTimeout(() => {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            for (let i = 0; i < this.state.array.length; i++) {\n                arrayBars[i].style.backgroundColor = MAIN_COLOR;\n            }\n        }, ANIMATION_SPEED_MS*len + 2000);\n    }\n\n    render() {\n        const {array} = this.state;\n        return (\n            <div className = \"visualizer\">\n                <div className = \"header\">\n                    <div className = \"title\">Kenya's Sorting Visualizer</div>\n                    <Button onClick={() => this.resetArray()}>Generate New Array</Button>\n                    <Button onClick={() => this.sortArray(0)}>Selection Sort</Button>\n                    <Button onClick={() => this.sortArray(1)}>Merge Sort</Button>\n                    <Button onClick={() => this.sortArray(2)}>Quick Sort</Button>\n                    <Button onClick={() => this.sortArray(3)}>Heap Sort</Button>\n                    <Button onClick={() => this.sortArray(4)}>Bubble Sort</Button>\n                </div>\n                <div className = \"array-container\">\n                    {array.map((value, idx) => (\n                        <div\n                            className=\"array-bar\"\n                            key = {idx}\n                            style = {{\n                            backgroundColor: MAIN_COLOR,\n                            height: `${value}px`,\n                        }}></div>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction randomInt(min,max) {\n    return Math.floor(Math.random()*(max-min+1)+min)\n}\n\n\n\n\n\n","/**\n * Returns the animations necessary for Selection Sort.\n */\nexport function getSelectionSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1)\n        return array;\n    for (let i = 0; i < array.length; i++) {\n        var min = i;\n        for (var j = i+1; j < array.length; j++) {\n            animations.push([j,j]);\n            animations.push([j,j]);\n            if (array[j] < array[min]) {\n                min = j;\n            }\n        }\n        swap(array, i, min, animations)\n    }\n    return animations;\n}\n\n/**\n * Returns the animations necessary for Merge Sort.\n */\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1)\n        return array;\n    const helperArray = array.slice();\n    mergeSortHelper(array, 0, array.length-1, helperArray, animations);\n    return animations;\n}\n\n/**\n * Helper method for getMergeSortAnimations.\n */\nfunction mergeSortHelper(mainArray, startIndex, endIndex, secondaryArray, animations) {\n    if (startIndex === endIndex)\n        return;\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\n    mergeSortHelper(secondaryArray, startIndex, middleIndex, mainArray, animations);\n    mergeSortHelper(secondaryArray, middleIndex + 1, endIndex, mainArray, animations);\n    merge(mainArray, startIndex, middleIndex, endIndex, secondaryArray, animations);\n}\n\n/**\n * Merges the array, assuming that it is already in order.\n */\nfunction merge(mainArr, start, middle, end, comparedArr, animations) {\n    let i = start;\n    let j = middle + 1;\n    let iterator = start;\n    while (i <= middle && j <= end) {\n        animations.push([i,j]);\n        animations.push([i,j]);\n        if (comparedArr[i] < comparedArr[j]) {\n            animations.push([iterator, comparedArr[i]]);\n            mainArr[iterator++] = comparedArr[i++];\n        }\n        else {\n            animations.push([iterator, comparedArr[j]]);\n            mainArr[iterator++] = comparedArr[j++];\n        }\n    }\n    while (i <= middle) {\n        animations.push([i,i]);\n        animations.push([i,i]);\n        animations.push([iterator, comparedArr[i]]);\n        mainArr[iterator++] = comparedArr[i++];\n    }\n    while (j <= end) {\n        animations.push([j,j]);\n        animations.push([j,j]);\n        animations.push([iterator, comparedArr[j]]);\n        mainArr[iterator++] = comparedArr[j++];\n    }\n}\n\n/**\n * Returns the animations necessary for Quick Sort.\n */\nexport function getQuickSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1)\n        return array;\n    quickSortHelper(array, 0, array.length-1, animations);\n    return animations;\n}\n\n/**\n * Helper method for getQuickSortAnimations.\n */\nfunction quickSortHelper(array, startIndex, endIndex, animations) {\n    if (startIndex < endIndex) {\n        let part = partition(array, startIndex, endIndex, animations);\n        quickSortHelper(array, startIndex, part-1, animations);\n        quickSortHelper(array, part+1, endIndex, animations);\n    }\n}\n\n/**\n * Provides a partition in which all array elements to the left are smaller than said partition value,\n * and all array elements to the right are greater.\n */\nfunction partition(array, start, end, animations) {\n    var pivot = array[end];\n    var i = start;\n    for (let j = start; j < end; j++) {\n        if (array[j] < pivot) {\n            swap(array, i, j, animations);\n            i++;\n        }\n    }\n    swap(array, i, end, animations);\n    return i;\n}\n\n/**\n * Returns the animations necessary for Heap Sort.\n */\nexport function getHeapSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1)\n        return array;\n    heapSortHelper(array, animations);\n    return animations;\n}\n\n/**\n * Helper method for getHeapSortAnimations.\n */\nfunction heapSortHelper(array, animations) {\n    let n = array.length;\n    //Build heap\n    for (let i = n/2 - 1; i >= 0; i--) {\n        heapify(array, n, i, animations);\n    }\n    //Extract element from heap one by one\n    for (let j = n-1; j > 0; j--) {\n        swap(array, 0, j, animations);\n        heapify(array, j, 0, animations)\n    }\n}\n\n/**\n * Builds heap in a top down manner.\n * n is size of heap, i is index of root\n */\nfunction heapify(array, n, i, animations) {\n    let largest = i;\n    let left = 2*i + 1;\n    let right = 2*i + 2;\n    if (left < n && array[left] > array[largest])\n        largest = left;\n    if (right < n && array[right] > array[largest])\n        largest = right;\n    if (largest !== i) {\n        swap(array, largest, i, animations);\n        heapify(array, n, largest, animations);\n    }\n}\n\n/**\n * Returns the animations necessary for Bubble Sort.\n */\nexport function getBubbleSortAnimations(array) {\n    const animations = [];\n    for (let i = 0; i < array.length-1; i++) {\n        for (let j = 0; j < array.length-i-1; j++) {\n            if (array[j] > array[j+1])\n                swap(array,j,j+1,animations);\n        }\n    }\n    return animations;\n}\n\n/**\n * Swaps two array values.\n */\n function swap(array, firstIndex, secondIndex, animations) {\n    const temp = array[firstIndex];\n    array[firstIndex] = array[secondIndex];\n    array[secondIndex] = temp;\n    animations.push([firstIndex, secondIndex]);\n    animations.push([firstIndex, secondIndex]);\n    animations.push([firstIndex, array[firstIndex], secondIndex, array[secondIndex]]);\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}